{"version":3,"sources":["components/spinner/spinner.js","components/postsContext/index.js","constants/constants.js","components/posts/show/show.js","actions/getPostsAction.js","components/hoc/withPostService.js","pages/mainPage/mainPage.js","components/UI/textField/textField.js","components/UI/button/button.js","reducers/loginReducer.js","reducers/registerReducer.js","reducers/getPostSReducer.js","reducers/index.js","services/firebaseApi.js","store.js","actions/loginAction.js","pages/loginPage/loginPage.js","components/UI/selectField/selectField.js","pages/registerPage/registerPage.js","pages/notFound/notFound.js","components/errorIndicator/errorIndicator.js","components/errorBoundry/errorBoundry.js","components/menu/menu.js","components/header/header.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Spinner","className","React","createContext","PostServiceProvider","Provider","PoststoreServiceConsumer","Consumer","ShowPost","this","props","getPostsAction","posts","loading","list","items","spinner","Component","PostsView","map","item","key","id","title","fulltext","date","mapDispatchToProps","dispatch","getState","fireBaseApi","console","log","getPosts","then","payload","type","Constants","catch","err","compose","Wrapped","connect","getPostsRed","MainPage","TextField","_onChange","event","value","target","input","onChange","label","fieldset","PureComponent","NoLabel","name","placeholder","labeltext","Label","htmlFor","Button","children","onClick","disabled","active","attrs","classes","classNames","Tag","href","defaultProps","initialState","username","password","error_message","auth","loginReducer","state","action","data","registerReduser","users","push","appReducers","combineReducers","form","formReduser","register","rootReducer","FireBaseApi","_apiURL","setPosts","a","fetch","newRequest","response","json","objectToArray","_transformPosts","post","note","method","body","Request","Object","keys","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","store","createStore","applyMiddleware","thunk","withExtraArgument","subscribe","serialisedState","stringify","window","setItem","e","saveState","userLogin","userRegister","userLogout","LoginPage","_onSubmit","formData","UserFound","find","history","confirm","LoginReduxForm","onSubmit","reduxForm","handleSubmit","noValidate","Field","component","Option","handleClick","classOption","currentValue","text","Select","handleToggle","setState","prevState","open","handleClear","getText","textField","option","length","val","i","required","RegisterPage","submit","values","alert","RegisterReduxForm","validate","NotFound","ErrorIndicator","hasError","error","errorInfo","ErrorBoundry","Menu","button","link","onclick","result","filter","word","btn","to","Header","createBrowserHistory","App","path","exact","Show","AutorizationPage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f5c5257.chunk.js","sourcesContent":["import React from 'react';\nimport './spinner.scss'\n\nconst Spinner = () => {\n\n    return (\n        <div className=\"lds-css ng-scope\">\n            <div className=\"lds-double-ring\">\n                <div></div>\n                <div></div>\n                <div>\n                    <div></div>\n                </div>\n                <div>\n                    <div></div>\n                </div>\n            </div>\n\n        </div>\n    )\n\n}\n\nexport default Spinner;\n","import React from 'react';\n\nconst {\n  Provider: PostServiceProvider,\n  Consumer: PoststoreServiceConsumer\n} = React.createContext();\n\nexport {\n  PostServiceProvider,\n  PoststoreServiceConsumer\n};\n","export default {\n\tLOGIN: 'LOGIN',\n\tLOGOUT: 'LOGOUT',\n\tREGISTRATION: 'REGISTRATION',\n\tGET_POST_SUCCESS: 'GET_POST_SUCCESS',\n\tGET_POST_ERROR: 'GET_POST_ERROR'\n}\n","import React, {Component} from 'react';\nimport Spinner from '../../spinner/spinner';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {withPoststoreService} from '../../hoc/withPostService';\nimport {getPostsAction} from '../../../actions/getPostsAction';\nimport './show.scss'\nclass ShowPost extends Component {\n\n\n\tcomponentDidMount() {\n\t\tthis.props.getPostsAction();\n\t}\n\n\n\trender() {\n\t\tconst {posts, loading} = this.props;\n\t\tconst list = !loading ? <PostsView items={posts}/> : null;\n\t\t// const list = !loading ? <div>asd</div> : null;\n\t\tconst spinner = loading ? <Spinner/> : null;\n\t\treturn (\n\t\t\t<div className='posts'>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className='posts__list'>\n\t\t\t\t\t{spinner}\n\t\t\t\t\t{list}\n\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\n\nconst PostsView = ({items}) => {\n\treturn items.map(item => {\n\t\treturn (\n\n\t\t\t<div className='posts__item' key={item.id}>\n\t\t\t\t<h2 className='posts__title'>\n\t\t\t\t\t{item.title}\n\t\t\t\t</h2>\n\t\t\t\t<p className='posts__text'>\n\t\t\t\t\t{item.fulltext}\n\t\t\t\t</p>\n\t\t\t\t<time className='posts__date'>\n\t\t\t\t\t{item.date}\n\t\t\t\t</time>\n\t\t\t\t{/*<div className='posts__note'>*/}\n\t\t\t\t{/*\t{item.type}*/}\n\t\t\t\t{/*</div>*/}\n\t\t\t</div>\n\n\t\t)\n\t})\n\t// return (\n\t// \t<h2>{}</h2>\n\t// )\n\n}\nconst mapStateToProps = ({getPostsRed:{posts,loading}}) => {\n\treturn {\n\t\tposts,\n\t\tloading\n\t};\n};\n\nconst mapDispatchToProps = {\n\tgetPostsAction\n}\nexport default compose(\n\twithPoststoreService(),\n\tconnect(mapStateToProps, mapDispatchToProps)\n)(ShowPost);\n","import Constants from '../constants/constants';\n\n\n// export const getPostsAction2 = (payload) => {\n// \t\treturn {\n// \t\t\ttype: Constants.GET_POST_SUCCESS,\n// \t\t\tpayload,\n// \t\t}\n// };const {\n// \t\t\tfireBaseApi, getPostsAction\n//\n// \t\t} = this.props;\n// \t\tfireBaseApi.getPosts()\n// \t\t\t.then((items) => {\n// \t\t\t\tgetPostsAction(items)\n// \t\t\t})\n// \t\tconsole.log(this.props);\n// \t}return (dispatch, getState, {getFirebase, getFirestore}) => {\n//\n\nexport const getPostsAction = () => {\n\t\treturn (dispatch,getState, {fireBaseApi}) => {\n\t\t\t//make async call database\n\t\t\tconsole.log(fireBaseApi);\n\t\t\tfireBaseApi.getPosts().then((payload) => {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: Constants.GET_POST_SUCCESS,\n\t\t\t\t\tpayload,\n\t\t\t\t})\n\t\t\t}).catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\n\n\t\t}\n\t}\n;\n","import React from 'react';\nimport { PoststoreServiceConsumer } from '../postsContext';\n\nconst withPoststoreService = () => (Wrapped) => {\n\n  return (props) => {\n    return (\n      <PoststoreServiceConsumer>\n        {\n          (fireBaseApi) => {\n            return (<Wrapped {...props}\n                     fireBaseApi={fireBaseApi}/>);\n          }\n        }\n      </PoststoreServiceConsumer>\n    );\n  }\n};\n\nexport{\n    withPoststoreService\n}\n","import React , { Component } from 'react';\nimport Show from \"../../components/posts/show/show\";\n\n\nclass MainPage extends Component {\n\n    render(){\n        return(\n        \t<div className=\"container\">\n            <h2>Главная страница</h2>\n\n\t\t\t</div>\n        )\n    }\n}\n\nexport default MainPage;\n","import React, {PureComponent} from 'react';\nimport './textField.scss'\n\nclass TextField extends PureComponent {\n\n\t_onChange = event => {\n\t\tconst value = event.target.value;\n\t\tthis.props.input.onChange(value);\n\t};\n\n\trender() {\n\t\t// const {meta: {touched, error, warning}, labeltext, name, type} = this.props;\n\t\tconst label = this.props.fieldset ? <Label props={this.props} onChange={this._onChange}/> : <NoLabel props={this.props} onChange={this._onChange}/>\n\n\t\treturn (\n\t\t\t<>\n\t\t\t{label}\n\t\t\t</>\n\t\t)\n\t}\n\n}\n\nconst NoLabel = (props) => {\n\n\treturn (\n\t\t<div>\n\t\t\t<input\n\t\t\t\tname={props.props.input.name}\n\t\t\t\tonChange={props.onChange}\n\t\t\t\tclassName='form-input'\n\t\t\t\tplaceholder={props.props.labeltext}\n\n\t\t\t/>\n\n\t\t</div>\n\t)\n}\nconst Label = (props) => {\n\n\n\treturn (\n\t\t<fieldset className='fieldset'>\n\t\t\t<legend><label htmlFor={props.props.input.name}>\n\t\t\t\t{props.props.input.name}</label></legend>\n\n\t\t\t<input\n\t\t\t\tid={props.props.input.name}\n\t\t\t\tname={props.props.input.name}\n\t\t\t\tonChange={props.onChange}\n\t\t\t\tclassName='form-input form-input-label'\n\n\t\t\t/>\n\n\n\t\t</fieldset>\n\n\t)\n}\n\n\nexport default TextField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'\nimport './button.scss';\n\n\nconst Button = ({\n    children,onClick,className,disabled,active , ...attrs\n                }) => {\n\n    const classes = classNames(\n        'button',\n        className,\n        { active },\n    );\n\n    const Tag = attrs.href ? 'a' : 'button';\n    return (\n        <Tag\n            {...attrs}\n            className={classes}\n            disabled={disabled}\n            onClick={onClick}\n        >{children}</Tag>\n    )\n}\n\nButton.propTypes = {\n    children: PropTypes.node,\n    classModify: PropTypes.array,\n    disabled: PropTypes.bool,\n    active: PropTypes.bool,\n    onClick: PropTypes.func,\n    className: PropTypes.string,\n};\n\nButton.defaultProps = {\n    children: 'Button',\n    onClick: () => {},\n    className: '',\n    active: false,\n    disabled: false,\n\n};\n\nexport default Button;\n\n","import Constants from '../constants/constants'\n\nconst initialState = {\n\tusername: '',\n\tpassword: '',\n\terror_message: '1',\n\tauth: false\n};\n\n\nconst loginReducer = (state = initialState, action) => {\n\n\n\tswitch (action.type) {\n\n\t\tcase Constants.LOGIN:\n\t\t\tconsole.log('ты тут?')\n\t\t\treturn {\n\t\t\t\t...action.data,\n\t\t\t\terror_message: '2',\n\t\t\t\tauth: true,\n\t\t\t};\n\n\t\tcase Constants.LOGOUT:\n\t\t\treturn {\n\t\t\t\t...initialState,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state\n\n\t}\n}\n\n\nexport default loginReducer;\n","import Constants from '../constants/constants';\n\nconst initialState = [];\n\nconst registerReduser = (state = initialState, action) =>{\n\n    switch (action.type) {\n\n\n        case Constants.REGISTRATION: {\n            console.log('наконец то бля');\n            const users = state;\n            users.push(action.data);\n            return users\n        }\n        default:\n            return state;\n    }\n\n}\n\nexport default registerReduser;\n","import Constants from '../constants/constants';\n\nconst initialState = {\n\tloading: true,\n\tposts: null\n}\n\nexport const getPostsReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase Constants.GET_POST_SUCCESS:\n\t\t\tconsole.log('create project success');\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: action.payload,\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase Constants.GET_POST_ERROR:\n\t\t\tconsole.log('create project error');\n\t\t\treturn state;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\n","import loginReducer from './loginReducer';\nimport registerReduser from './registerReducer';\nimport {combineReducers} from \"redux\";\nimport {reducer as formReduser} from 'redux-form';\nimport {getPostsReducer} from './getPostSReducer';\n\nconst appReducers = combineReducers({\n\tauth: loginReducer,\n\tform: formReduser,\n\tgetPostsRed: getPostsReducer,\n\tregister: registerReduser\n});\nconst rootReducer = (state, action) => {\n\treturn appReducers(state, action);\n};\nexport default rootReducer;\n","export default class FireBaseApi {\n    _apiURL = `https://js-simple-6efdf.firebaseio.com/posts.json`;\n\n    newRequest(method, body = null) {\n        return new Request(this._apiURL, {\n            method: method,\n            body: body\n        })\n    }\n\n    setPosts = async (data) =>{\n        const response = await fetch(this.newRequest('post',data));\n\n         return await response.json()\n    }\n\n    getPosts = async () => {\n        const response = await fetch(this.newRequest('get'));\n        const data = await response.json();\n        return this.objectToArray(data);\n    };\n\n    objectToArray(data) {\n        return Object.keys(data).map(key => {\n            const item = data[key];\n            item.id = key;\n            return item;\n        })\n    }\n\n    _transformPosts = (posts) => {\n        return posts.map(post => {\n            return {\n                id: post.id,\n                title: post.title,\n                fulltext: post.fulltext,\n                date: post.date,\n                note: post.note,\n            }\n        })\n\n    }\n}\n\n\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from \"redux-thunk\";\nimport rootReducer from './reducers/';\nimport FireBaseApi from \"./services/firebaseApi\";\nconst fireBaseApi = new FireBaseApi();\n\n\nconst saveState = (state) => {\n\ttry {\n\t\tconst serialisedState = JSON.stringify(state);\n\t\twindow.localStorage.setItem('myApp', serialisedState)\n\t} catch (e) {\n\n\t}\n};\n\n\nexport const loadState = () => {\n\ttry {\n\t\tconst serializedState = localStorage.getItem('myApp');\n\t\tif (serializedState === null) {\n\t\t\tconsole.log('нету');\n\t\t\treturn undefined;\n\t\t}\n\t\treturn JSON.parse(serializedState);\n\n\t} catch (err) {\n\t\treturn undefined;\n\t}\n}\nconst persistedState = loadState();\n\n\nconst store = createStore(\n\trootReducer,\n\tpersistedState,\n\tapplyMiddleware(thunk.withExtraArgument({fireBaseApi}))\n);\n\n\nstore.subscribe(() => {\n\tsaveState(store.getState());\n});\nexport const dispatch = store.dispatch;\nexport const getState = store.getState;\nexport default store;\n","import Constants from '../constants/constants'\nimport {dispatch} from '../store';\n\nconst userLogin = (data) => {\n\t\t\tconsole.log(\"выполнялся\",data)\n\t\t\t\tdispatch ({\n\t\t\t\t\ttype: Constants.LOGIN,\n\t\t\t\t\tdata,\n\t\t\t\t})\n\n};\n\nconst userRegister = (data) => {\n\n\t\tdispatch({\n\t\t\ttype: Constants.REGISTRATION,\n\t\t\tdata,\n\t\t})\n\t\tuserLogin(data)\n\n};\n\n\nconst userLogout = () => {\n\tdispatch({\n\t\ttype: Constants.LOGOUT,\n\n\t})\n};\n\nexport {\n\tuserLogin,\n\tuserRegister,\n\tuserLogout,\n}\n","import React, {Component} from 'react';\nimport {Field, reduxForm} from 'redux-form'\nimport {connect} from 'react-redux';\n\nimport TextField from '../../components/UI/textField/textField';\nimport Button from '../../components/UI/button/button';\nimport './loginPage.scss'\nimport {\n\tuserLogin,\n\tuserRegister,\n\tuserLogout,\n} from '../../actions/loginAction'\n//\n// const required = value => !value && 'Required field';\n//\n// const email = value =>\n//     value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\n//         'Invalid email address' : undefined;\nconst FORM_NAME = \"authForm\";\n\nclass LoginPage extends Component {\n\n\t_onSubmit = (formData) => {\n\t\tconst {users} = this.props;\n\t\tconst UserFound = users.find(item => item.username === formData.username && item.password === formData.password);\n\t\tif (UserFound) {\n\t\t\tuserLogin(UserFound);\n\t\t\tthis.props.history.push('/posts/');\n\t\t} else {\n\t\t\tif (window.confirm(\"Нет такого пользователя зарегистрироваться?\")) {\n\t\t\t\tthis.props.history.push('/register/');\n\t\t\t}\n\t\t}\n\t\tuserLogin(formData)\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<LoginReduxForm onSubmit={this._onSubmit}/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nconst LoginForm = (props) => {\n\treturn (\n\t\t<div className=\"container\">\n\t\t<form onSubmit={props.handleSubmit}\n\t\t\t\tnoValidate\n\t\t\t\tclassName='form-login'\n\t\t>\n\t\t\t<h2>Авторизация</h2>\n\t\t\t<div>\n\t\t\t\t<div className='form__title'>Please, login</div>\n\t\t\t\t<Field\n\t\t\t\t\tname='username'\n\t\t\t\t\tlabeltext=\"username\"\n\t\t\t\t\t// validate={[required,email]}\n\t\t\t\t\tcomponent={TextField}/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<Field\n\t\t\t\t\tname='password'\n\t\t\t\t\tlabeltext=\"password\"\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t// validate={required}\n\t\t\t\t\tcomponent={TextField}/>\n\t\t\t</div>\n\t\t\t<br/>\n\t\t\t<div>\n\n\t\t\t\t{/*<Button*/}\n\t\t\t\t{/*    textButton=\"LOG-IN\"*/}\n\t\t\t\t{/*    type='submit'*/}\n\n\t\t\t\t<Button type='submit'>Отправить</Button>\n\t\t\t\t{/*/>*/}\n\t\t\t\t{/*<Link to=\"/register/\" component={RegPage}>to registration</Link>*/}\n\t\t\t</div>\n\t\t</form>\n\t\t</div>\n\t)\n}\nconst LoginReduxForm = reduxForm({\n\tform: FORM_NAME\n\n})(LoginForm);\n\n\nconst mapStateToProps = state => ({\n\tusers: state.register\n});\nconst mapDispatchToProps = {\n\tuserRegister,\n\tuserLogout,\n\tuserLogin,\n};\nexport default connect(mapStateToProps,mapDispatchToProps)(LoginPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './select.scss';\n\nclass Option extends React.Component {\n\thandleClick = () => {\n\t\tthis.props.onClick && this.props.onClick(this.props.value);\n\t};\n\n\trender() {\n\t\tconst classOption = this.props.currentValue === this.props.value ? \"select__option selected\" : \"select__option\";\n\t\treturn (\n\t\t\t<div className={classOption} onClick={this.handleClick}>{this.props.text}</div>\n\t\t);\n\t}\n}\n\nclass Select extends React.PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {open: false}\n\t}\n\n\tget textField() {\n\n\t\tconst {input, items, labeltext} = this.props;\n\t\tif (!input.value || input.value.length === 0) {\n\t\t\treturn labeltext;\n\t\t} else {\n\t\t\tconst val = items.find(i => i.value === this.props.input.value);\n\t\t\treturn val && val.text;\n\t\t}\n\t}\n\n\thandleClick = (value) => {\n\t\tthis.props.input.onChange(value);\n\t\tthis.handleToggle();\n\t};\n\n\thandleToggle = () => {\n\t\tthis.setState(prevState => ({open: !prevState.open}));\n\t};\n\n\thandleClear = () => {\n\t\tthis.props.input.onChange(null);\n\t\tthis.handleToggle();\n\t};\n\n\trender() {\n\t\tconst {labeltext,items} = this.props;\n\t\tconst getText = this.textField;\n\t\treturn (\n\t\t\t<div className={`select ${this.state.open && 'opened'}`}>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"select__block\"\n\t\t\t\t\tonClick={this.handleToggle}\n\t\t\t\t>\n\t\t\t\t\t{getText}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"select__list\">\n\t\t\t\t\t<div className=\"select__option\" onClick={this.handleClear}>{labeltext}</div>\n\t\t\t\t\t{items.map(option => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Option\n\t\t\t\t\t\t\t\tkey={option.id}\n\t\t\t\t\t\t\t\tonClick={this.handleClick}\n\t\t\t\t\t\t\t\tvalue={option.value}\n\t\t\t\t\t\t\t\ttext={option.text}\n\t\t\t\t\t\t\t\tcurrentValue={this.props.input.value}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// Select.propTypes = {\n// \tlabeltext: PropTypes.string,\n// };\n//\n// Select.DefaultProps = {\n// \ttype: \"text\",\n// };\n\nexport default Select;\n","import React, {Component} from 'react';\nimport {Field, reduxForm} from 'redux-form'\nimport {connect} from 'react-redux';\nimport Button from '../../components/UI/button/button';\nimport TextField from '../../components/UI/textField/textField';\nimport {\n    userLogin,\n    userRegister,\n    userLogout,\n} from '../../actions/loginAction';\nimport Select from \"../../components/UI/selectField/selectField\";\nimport './formRegister.scss'\n\nconst FORM_NAME = \"registerForm\";\n\nconst required = value => !value && 'Required field';\n//\n// const email = value =>\n//     value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\n//         'Invalid email address' : undefined;\n\nclass RegisterPage extends Component {\n    submit = (values) => {\n\n        const {users} = this.props;\n        if (users.find(item => item.username === values.username)) {\n            return alert('Такой уже существует!');\n        }\n        userRegister(values);\n        userLogin(values);\n        this.props.history.push('/posts/');\n    };\n\n    render() {\n\n\n        return (\n           <div className=\"container\">\n                <RegisterReduxForm onSubmit={this.submit}/>\n            </div>\n        )\n    }\n}\n\n\nconst RegisterForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className=\"form-register\">\n            <h2 className='form-register__title'>Регистрация</h2>\n\n                <div className='form-register__title'>Please, login</div>\n                <Field\n\t\t\t\t\t\t fieldset\n                    name='username'\n                    labeltext=\"username\"\n                    validate={required}\n                    component={TextField}/>\n\n\n\t\t\t\t\t<Field\n\t\t\t\t\t\tfieldset\n\t\t\t\t\t\tname='password'\n\t\t\t\t\t\tlabeltext=\"password\"\n\t\t\t\t\t\tvalidate={required}\n\t\t\t\t\t\tcomponent={TextField}/>\n\n\n\n\t\t\t  <Field\n\t\t\t\t  name=\"education\"\n\t\t\t\t  component={Select}\n\t\t\t\t  labeltext=\"Выберите какое пиво пить будете\"\n\t\t\t\t  items={[\n\t\t\t\t\t  {id: 1, value: \"Клинское\", text: \"Клинское\"},\n\t\t\t\t\t  {id: 2, value: \"Жигулевское\", text: \"Жигулевское\"},\n\t\t\t\t\t  {id: 3, value: \"Три медведя\", text: \"Три медведя\"},\n\t\t\t\t\t  {id: 4, value: \"Витязь\", text: \"Витязь\"}\n\t\t\t\t  ]}\n\t\t\t  />\n\n            <div>\n                <Button type='submit'>Отправить</Button>\n            </div>\n\n        </form>\n    )\n}\n\n\nconst RegisterReduxForm = reduxForm({\n    form: FORM_NAME,\n    // destroyOnUnmount: true,\n})(RegisterForm);\n\nconst mapStateToProps = state => {\n    return {\n        users: state.register,\n    }\n};\n\n// const mapDispatchToProps = (dispatch) => {\n//     return {\n//         userLogin: () => {\n//             dispatch(userLogin());\n//         },\n//         userRegister: () => {\n//             dispatch(userRegister);\n//         },\n//         userLogout: () => {\n//             dispatch(userLogout());\n//         }\n//     }\n// };\n\n\nexport default connect(mapStateToProps)(RegisterPage);\n","import React from 'react';\n\n\nconst NotFound = () => {\n\n\n    return(\n        <div>Ничего не найдено</div>\n    )\n}\n\nexport default NotFound;","import React ,{ Component } from 'react';\n\n\n\nexport default class ErrorIndicator extends  Component {\n\n\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        return(\n            <div>Damn</div>\n        )\n    }\n}\n","import React ,{ Component } from 'react';\n\nimport ErrorIndicator from '../errorIndicator/errorIndicator';\n\nexport default class ErrorBoundry extends  Component {\n\n\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError: true})\n    }\n\n\n    render() {\n\n        if(this.state.hasError){\n            return <ErrorIndicator/>\n        }\n\n        return this.props.children;\n    }\n}\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport './menu.scss';\nimport Button from '../UI/button/button'\nimport {userLogout} from \"../../actions/loginAction\";\nclass Menu extends Component {\n\n\tstate = {\n\t\tbutton: [\n\t\t\t{title: 'Главная',link:'/', id:12, auth: true},\n\t\t\t{title: 'Авторизация',link:'/auto/', id:1222,auth: false},\n\n\t\t\t{title: 'Регистрация',link:'/register/', id:112,auth: false},\n\t\t\t{title: 'Посты',link:'/posts/', id:122,auth: true},\n\t\t\t{title: 'Выйти',link:'/', id:12221,auth: true ,onclick: ()=>{userLogout()}},\n\t\t]\n\t}\n\n\n\trender() {\n\t\tconst { auth } = this.props;\n\t\tconst { button } = this.state;\n\t\tconst result = button.filter(word => word.auth === auth);\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t<div className={this.props.className}>\n\t\t\t\t<nav className='main-menu'>\n\t\t\t\t\t{\n\n\t\t\t\t\t\tresult.map(btn=>{\n\t\t\t\t\t\t\treturn <Link key={btn.id}  onClick={btn.onclick}\n\t\t\t\t\t\tclassName=\"main-menu__link\" to={btn.link}><Button>{btn.title}</Button> </Link>\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t{/*<Link to=\"/\"><Button href>Главная</Button> </Link>*/}\n\t\t\t\t\t{/*<Link to=\"/auto/\"><Button href>Auth</Button></Link>*/}\n\t\t\t\t\t{/*<Link to=\"/register/\"><Button href>Registration</Button></Link>*/}\n\t\t\t\t\t{/*<Link to=\"/posts/\"><Button href>Посты</Button></Link>*/}\n\t\t\t\t</nav>\n\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\nconst mapStateToProps =state =>{\n\treturn{\n\t\tauth: state.auth.auth,\n\t}\n}\nexport default connect(mapStateToProps)(Menu);\n","import React, {Component} from 'react';\nimport Menu from \"../menu/menu\";\nimport './header.scss'\n\n\nclass Header extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<header className='header'>\n\t\t\t\t<Menu className={\"container\"}/>\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport './App.scss'\nimport {Router, Route, Switch} from 'react-router-dom';\nimport MainPage from '../../pages/mainPage/mainPage'\nimport AutorizationPage from '../../pages/loginPage/loginPage'\nimport RegisterPage from '../../pages/registerPage/registerPage'\nimport NotFound from '../../pages/notFound/notFound'\n\nimport ErrorBoundry from '../errorBoundry/errorBoundry';\nimport {createBrowserHistory} from \"history\"\nimport Show from '../posts/show/show'\nimport Header from \"../header/header\";\n// import firebase from 'firebase';\n// import { firestoreConnect } from 'react-redux-firebase'\n// import { connect } from 'react-redux'\n\n\nconst history = createBrowserHistory();\n\n\nclass App extends Component {\n\n\n\trender() {\n\n\t\treturn (\n\n\t\t\t<ErrorBoundry>\n\t\t\t\t<Router history={history}>\n\n\t\t\t\t\t\t<Header/>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path='/' exact component={MainPage}/>\n\t\t\t\t\t\t\t<Route path='/posts/' exact component={Show}/>\n\t\t\t\t\t\t\t<Route path='/auto/' component={AutorizationPage}/>\n\t\t\t\t\t\t\t<Route path='/register/' component={RegisterPage}/>\n\t\t\t\t\t\t\t<Route component={NotFound}/>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t</Router>\n\t\t\t</ErrorBoundry>\n\n\t\t)\n\t}\n\n}\n\n// const mapStateToProps = (state, ownProps) => {\n//   // console.log(state);\n//   const id = ownProps.match.params.id;\n//   const projects = state.firestore.data.projects;\n//   const project = projects ? projects[id] : null\n//   return {\n//     project: project\n//   }\n// // }\n// export default compose(\n//   connect(),\n//   firestoreConnect([{\n//     collection: 'projects'\n//   }])\n// )(App)\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from \"./store\";\nimport FireBaseApi from \"./services/firebaseApi\";\nimport {PostServiceProvider} from './components/postsContext/'\n\n\nimport * as serviceWorker from './serviceWorker';\nconst fireBaseApi = new FireBaseApi();\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<PostServiceProvider value={fireBaseApi}>\n\t\t\t<BrowserRouter>\n\t\t\t\t<App/>\n\t\t\t</BrowserRouter>\n\t\t</PostServiceProvider>\n\t</Provider>\n\t, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}