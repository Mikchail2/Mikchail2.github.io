{"version":3,"sources":["utils/cssUtils.js","components/button/button.jsx","reducers/loginReducer.js","reducers/index.js","state.js","actions/loginActions.js","components/navigations/navigations.jsx","components/header/header.jsx","hoc/withLoginProps.js","pages/mainPage/MainPage.jsx","pages/aboutPage/AboutPage.jsx","pages/newsPage/NewsPage.jsx","App.js","serviceWorker.js","index.js"],"names":["CssUtils","mergeClasses","classes","classNames","mergeModifiers","baseClass","modifiers","cssModifiers","Array","slice","result","forEach","modifier","Button","onClickAction","e","console","log","props","onClick","preventDefault","this","children","className","disabled","size","color","link","isBlock","text","buttonClass","to","Component","initialState","login","username","password","appReducer","combineReducers","state","action","payload","type","form","formReduser","rootReduser","store","createStore","rootReducer","dispatch","getState","loginAction","logoutAction","Navigations","connect","Header","withLoginProps","View","MainPage","_onSubmit","formData","LoginReduxForm","onSubmit","reduxForm","destroyOnUnmount","handleSubmit","htmlFor","Field","component","name","id","aria-describedby","placeholder","mapDispatchToProps","AboutPage","NewsPage","App","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.855d7b94.chunk.js","sourcesContent":["import classNames from 'classnames';\r\n\r\nconst mergeClasses = (...classes) => classNames(classes);\r\n\r\nconst mergeModifiers = (baseClass,modifiers) =>{\r\n    if(!modifiers) return baseClass;\r\n\r\n    const cssModifiers = modifiers instanceof Array ? modifiers.slice() : [modifiers];\r\n\r\n\r\n    let result = baseClass;\r\n    cssModifiers.forEach(modifier=>{\r\n        if(typeof modifiers === 'string'){\r\n            result += ` ${baseClass}--${modifier}`\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\nconst CssUtils = {\r\n    mergeClasses,\r\n    mergeModifiers\r\n}\r\n\r\n\r\nexport default CssUtils;\r\n","import React, {Component} from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport CssUtils from '../../utils/cssUtils'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Button extends Component {\r\n    onClickAction = e => {\r\n        console.log(this.props.onClick)\r\n            e.preventDefault();\r\n            this.props.onClick(e);\r\n    }\r\n    render() {\r\n        const {\r\n            children, className, onClick, disabled,size,color,link, isBlock ,text,\r\n        } = this.props;\r\n        const buttonClass = CssUtils.mergeClasses(\r\n            className,\r\n            color && `${className}-${color}`,\r\n            size && `${className}-${size}`,\r\n            isBlock && `${className}-block`\r\n        );\r\n\r\n        if(link){\r\n            return (\r\n                <NavLink\r\n                    to={link} className={buttonClass}\r\n                >\r\n                    {text || children}\r\n                </NavLink>\r\n            )\r\n        }\r\n        return (\r\n            <button\r\n             className={buttonClass}\r\n             onClick={onClick && this.onClickAction}\r\n             disabled={disabled}\r\n            >\r\n                {text || children}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n//\r\n// const Button = ({children, className, onClick, disabled, active, ...attrs}) => {\r\n//\r\n//\r\n//     const classes = classNames(\r\n//         'btn',\r\n//         className,\r\n//         {active},\r\n//         {disabled}\r\n//     )\r\n//\r\n//     const Tag = attrs.href ? 'a' : 'button';\r\n//     return (\r\n//         <Tag\r\n//             {...attrs}\r\n//             className={classes}\r\n//             disable={disabled}\r\n//             onClick={onClickAction}\r\n//\r\n//         >\r\n//             {children}\r\n//         </Tag>\r\n//     )\r\n// };\r\n//\r\n// Button.propTypes = {\r\n//     children: PropTypes.node,\r\n//     onClick: PropTypes.func,\r\n//     classNames: PropTypes.string,\r\n//     disabled: PropTypes.bool,\r\n//     active: PropTypes.bool\r\n//\r\n// };\r\n// Button.defaultProps = {\r\n//     children: 'Button',\r\n//     onClick: () => {\r\n//     },\r\n//     classNames: '',\r\n//     disabled: false,\r\n//     active: false\r\n//\r\n// };\r\n//\r\n// export default Button;\r\n","const initialState = {\r\n    login: false,\r\n    username: '',\r\n    password: '',\r\n};\r\n\r\nexport const loginReducer = (state = initialState, action)=>{\r\n    console.log('reduser',action.payload)\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            return{\r\n                ...state,\r\n                ...action.payload,\r\n                login: true,\r\n            }\r\n\r\n        case 'LOGOUT':\r\n\r\n            return{\r\n                ...initialState\r\n            }\r\n\r\n        default:\r\n            return state;\r\n\r\n\r\n    }\r\n\r\n}\r\n","import {loginReducer} from './loginReducer';\r\n\r\nimport {combineReducers} from \"redux\";\r\nimport {reducer as formReduser} from \"redux-form\";\r\n\r\n\r\nconst appReducer = combineReducers({\r\n    login: loginReducer,\r\n    form: formReduser,\r\n});\r\n\r\nconst rootReduser = (state,action) =>{\r\n    return appReducer(state,action);\r\n};\r\n\r\nexport default rootReduser;\r\n","import {createStore, applyMiddleware, compose} from 'redux';\r\n\r\nimport rootReducer from './reducers/';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport const dispatch = store.dispatch;\r\nexport const getState = store.getState;\r\nexport default store;\r\n","import { dispatch } from '../state';\r\n\r\n\r\nexport const loginAction = (payload) => {\r\n        console.log('action',payload)\r\n    dispatch({\r\n        type: 'LOGIN',\r\n        payload\r\n    })\r\n\r\n};\r\n\r\n\r\nexport const logoutAction = () => {\r\n    dispatch({\r\n        type: 'LOGOUT',\r\n    })\r\n\r\n};\r\n\r\n","import React, {Component} from 'react';\r\nimport Button from '../button/button';\r\nimport {logoutAction} from '../../actions/loginActions'\r\nimport {connect} from \"react-redux\";\r\nclass Navigations extends Component {\r\n\r\n\r\n    render() {\r\n        const { login } = this.props;\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Button className=\"nav-link\"  color=\"primary\" link='/main'>Главная</Button>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Button className=\"nav-link\"  color=\"primary\" link='/news'> Новости</Button>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Button className=\"nav-link\" color=\"primary\" link='/about'> О компании</Button>\r\n                        </li>\r\n                        <li className=\"nav-item ml-auto\">\r\n                            {login && <Button className=\"btn\" onClick={logoutAction} color=\"light\"> Выйти</Button>}\r\n                        </li>\r\n\r\n                    </ul>\r\n\r\n            </nav>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state =>({\r\n    login: state.login.login\r\n});\r\nexport default connect(mapStateToProps)(Navigations);\r\n","import React, {Component} from 'react';\r\nimport Navigations from '../navigations/navigations';\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div >\r\n               <Navigations/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport {Redirect} from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\n\r\n// import Spinner from '../spinner';\r\n// import ErrorIndicator from '../error-indicator';\r\n\r\nconst withLoginProps = (View) => {\r\n    return class extends Component {\r\n        //\r\n        // state = {\r\n        //     data: null\r\n        // };\r\n\r\n        // componentDidMount() {\r\n        //     getData()\r\n        //         .then((data) => {\r\n        //             this.setState({\r\n        //                 data\r\n        //             });\r\n        //         });\r\n        // }\r\n\r\n        render() {\r\n            const { login } = this.props;\r\n\r\n            if (!login) {\r\n                return <Redirect to='/main'/>\r\n            }\r\n\r\n            return <View {...this.props} />;\r\n        }\r\n    };\r\n};\r\n\r\n\r\n\r\nexport default withLoginProps;\r\n","import React, {Component} from 'react';\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'react';\r\nimport {loginAction} from '../../actions/loginActions';\r\nimport withLoginProps from \"../../hoc/withLoginProps\";\r\n\r\nclass MainPage extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        console.log(this.props)\r\n    }\r\n\r\n    _onSubmit=(formData)=>{\r\n        loginAction(formData);\r\n    }\r\n\r\n    render() {\r\n        // const { login } = this.props;\r\n        return (\r\n            <div className='container'>\r\n                <h1>главная страница</h1>\r\n                <LoginReduxForm onSubmit={this._onSubmit}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst LoginForm = (props) => (\r\n    <form className='col-sm-10 col-md-5 col-12 col-xl-5' onSubmit={props.handleSubmit}>\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"exampleInputEmail1\">Login</label>\r\n            <Field type=\"text\" component={'input'} name=\"username\" className=\"form-control\" id=\"exampleInputEmail1\"\r\n                   aria-describedby=\"emailHelp\" placeholder=\"Login\"/>\r\n\r\n        </div>\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n            <Field component={'input'} type=\"password\" name=\"password\" className=\"form-control\" id=\"exampleInputPassword1\"\r\n                   placeholder=\"Password\"/>\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n)\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'loginForm',\r\n    destroyOnUnmount: true,\r\n\r\n})(LoginForm);\r\n\r\nconst mapStateToProps = state => ({\r\n    login: state.login.login,\r\n    username: state.login.username,\r\n    password: state.login.password,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    loginAction\r\n};\r\n// withLoginProps\r\n// export default compose(\r\n//     withLoginProps(),\r\n//     connect(mapStateToProps,mapDispatchToProps),\r\n// )(MainPage);\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MainPage)\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport withLoginProps from \"../../hoc/withLoginProps\";\r\n\r\nclass AboutPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                О компании\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state =>({\r\n    login: state.login.login\r\n});\r\n\r\nexport default connect(mapStateToProps)(withLoginProps(AboutPage))\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport withLoginProps from \"../../hoc/withLoginProps\";\r\n\r\nclass NewsPage extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n               Новости\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    login: state.login.login\r\n});\r\n\r\nexport default connect(mapStateToProps)(withLoginProps(NewsPage))\r\n// export default NewsPage;\r\n","import React, {Component} from 'react';\r\nimport Header from \"./components/header/header\";\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport MainPage from \"./pages/mainPage/MainPage\";\r\nimport AboutPage from \"./pages/aboutPage/AboutPage\";\r\nimport NewsPage from \"./pages/newsPage/NewsPage\";\r\nimport {Provider} from 'react-redux';\r\nimport store from \"./state\";\r\n// import {createBrowserHistory} from \"history\"\r\n// import 'bootstrap';\r\n\r\n// const history = createBrowserHistory();\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <Provider  store={store}>\r\n                <BrowserRouter>\r\n                    <Header/>\r\n                    <div className='container pt-5'>\r\n                        <Switch>\r\n                            <Route path='/' exact component={MainPage}/>\r\n                            <Route path='/main' component={MainPage}/>\r\n                            <Route path='/about' component={AboutPage}/>\r\n                            <Route path='/news' component={NewsPage}/>\r\n                            <Route render={() => {\r\n                                return (<h2>Ничего</h2>)\r\n                            }}/>\r\n                        </Switch>\r\n                    </div>\r\n                </BrowserRouter>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}