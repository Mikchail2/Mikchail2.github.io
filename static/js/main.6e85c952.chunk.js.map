{"version":3,"sources":["components/post-context/post-service-context.js","components/fuck-hoc/withPoststoreService.js","components/modal/myPortal.js","components/modal/modal.js","components/form/form.js","action/action.js","components/list/list-item.js","components/spinner/spinner.js","components/list/list.js","components/app/App.js","serviceWorker.js","reducer/reducer.js","services/firebase-api.js","index.js"],"names":["React","createContext","PostServiceProvider","Provider","PoststoreServiceConsumer","Consumer","withPoststoreService","Wrapped","props","fireBaseApi","MyPortal","el","document","createElement","body","appendChild","this","removeChild","ReactDOM","createPortal","children","Component","Modal","title","isOpen","onCancel","onSubmit","className","onClick","Form","state","fulltext","openModal","console","log","openMenu","handlerSubmit","event","preventDefault","data","date","Date","toLocaleString","note","setPosts","JSON","stringify","catch","err","setState","closeMenu","handleCancel","handlerChanger","target","name","value","openMenuFlag","htmlFor","onChange","type","mapDispatchToProps","compose","connect","ListItem","Spinner","List","postsLoaded","getPosts","then","items","loading","list","spinner","Container","Ulist","PostsView","map","item","FlexLi","key","id","newPosts","payload","styled","ul","div","li","App","Boolean","window","location","hostname","match","initialState","reducer","action","FireBaseApi","_apiURL","a","fetch","newRequest","response","json","objectToArray","_transformPosts","posts","post","method","Request","Object","keys","store","createStore","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e85c952.chunk.js","sourcesContent":["import React from 'react';\n\nconst {\n  Provider: PostServiceProvider,\n  Consumer: PoststoreServiceConsumer\n} = React.createContext();\n\nexport {\n  PostServiceProvider,\n  PoststoreServiceConsumer\n};\n","import React from 'react';\nimport { PoststoreServiceConsumer } from '../post-context/post-service-context';\n\nconst withPoststoreService = () => (Wrapped) => {\n\n  return (props) => {\n    return (\n      <PoststoreServiceConsumer>\n        {\n          (fireBaseApi) => {\n            return (<Wrapped {...props}\n                     fireBaseApi={fireBaseApi}/>);\n          }\n        }\n      </PoststoreServiceConsumer>\n    );\n  }\n};\n\nexport{\n    withPoststoreService\n}\n\n","import React, {Component} from 'react';\nimport ReactDOM from \"react-dom\";\n\nexport default class MyPortal extends Component {\n\n    el = document.createElement('div');\n\n    componentDidMount() {\n        document.body.appendChild(this.el);\n    }\n\n    componentWillUnmount() {\n        document.body.removeChild(this.el)\n    }\n\n    render(){\n        return ReactDOM.createPortal(this.props.children,this.el);\n    }\n}\n\n\n\n","import React from 'react';\n\nimport MyPortal from './myPortal';\n\nimport './modal.scss';\n\nconst Modal = ({\n  title, isOpen, onCancel, onSubmit, children,\n}) => {\n  return (\n    <>\n      { isOpen &&\n        <MyPortal>\n          <div className=\"modalOverlay\">\n            <div className=\"modalWindow\">\n              <div className=\"modalHeader\">\n                <div className=\"modalTitle\">{title}</div>\n              </div>\n              <div className=\"modalBody\">\n                {children}\n              </div>\n              <div className=\"modalFooter\">\n                <button onClick={onCancel} >Cancel</button>\n                <button onClick={onSubmit}>Submit</button>\n              </div>\n            </div>\n          </div>\n        </MyPortal>\n      }\n    </>\n  );\n};\n\n\nexport default Modal;\n","import React, {Component} from 'react';\nimport {compose} from 'redux';\nimport {connect} from 'react-redux';\nimport {withPoststoreService} from '../fuck-hoc/withPoststoreService';\nimport Modal from '../modal/modal';\nimport {openMenu,closeMenu} from '../../action/action';\nimport '../style.scss'\n\n class Form extends Component {\n    state = {\n        title: '',\n        fulltext: '',\n\n    };\n    openModal = () => {\n        console.log(this.props.openMenu)\n        this.props.openMenu();\n    }\n    handlerSubmit = (event) => {\n        event.preventDefault();\n        const {fireBaseApi} = this.props;\n        const data = {\n            title: this.state.title,\n            fulltext: this.state.fulltext,\n            date: new Date().toLocaleString(),\n            note: 'string'\n        }\n        fireBaseApi.setPosts(JSON.stringify(data))\n            .catch(err => console.log(err));\n\n        this.setState({\n            title: '',\n            fulltext: '',\n\n        });\n        this.props.closeMenu();\n    };\n\n    handleCancel = () => {\n        console.log('Cancel function!');\n        this.props.closeMenu();\n    }\n    handlerChanger = (event) => {\n        const target = event.target;\n        const name = target.name;\n        this.setState({\n            [name]: target.value\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Modal\n                    title=\"Test Dialog window\"\n                    isOpen={this.props.openMenuFlag}\n                    onCancel={this.handleCancel}\n                    onSubmit={this.handlerSubmit}\n                >\n\n\n                        <label htmlFor=\"\" className='label__text'>\n                            Title:\n                            <input onChange={this.handlerChanger} type=\"text\" name=\"title\"\n                                       value={this.state.title}/>\n                        </label>\n                        <label htmlFor=\"\" className='label__text'>\n                            Fulltext:\n                            <input onChange={this.handlerChanger} type=\"text\" name=\"fulltext\"\n                                       value={this.state.fulltext}/>\n                        </label>\n\n\n\n                </Modal>\n\n                    <button onClick={this.openModal}>Show modal</button>\n\n\n            </>\n        )\n    }\n}\n\n\nconst mapStateToProps = ({openMenuFlag})=>{\n    return {openMenuFlag}\n};\n\nconst mapDispatchToProps = {\n    openMenu,\n    closeMenu\n}\nexport default compose(\n    withPoststoreService(),\n    connect(mapStateToProps,mapDispatchToProps)\n)(Form)\n\n\n","const postsLoaded = (newPosts) => {\n    return {\n        type: 'POSTS_LOADED',\n        payload: newPosts,\n\n    };\n};\n\nconst booksRequested = () => {\n    return {\n        type: 'BOOKS_REQUESTED'\n    }\n};\n\nconst openMenu = () => {\n    return {\n        type: 'OPEN_MENU'\n\n    }\n};\nconst closeMenu = () => {\n    return {\n        type: 'CLOSE_MENU'\n    }\n};\nconst booksError = (error) => {\n    return {\n        type: 'BOOKS_ERROR',\n        payload: error\n    };\n};\n\nexport {\n    postsLoaded,\n    openMenu,\n    closeMenu,\n    booksRequested,\n    booksError\n};\n","import React from 'react';\n\n\n\nconst ListItem = ({children,className}) => {\n    return (\n        <div className={className}>{children}</div>\n    )\n}\n\nexport default ListItem;\n","import React from 'react';\nimport './spiner.css'\n\nconst Spinner = () => {\n\n    return (\n        <div className=\"lds-css ng-scope\">\n            <div className=\"lds-double-ring\">\n                <div></div>\n                <div></div>\n                <div>\n                    <div></div>\n                </div>\n                <div>\n                    <div></div>\n                </div>\n            </div>\n\n        </div>\n    )\n\n}\n\nexport default Spinner;\n\n","import React, {Component} from 'react';\nimport ListItem from './list-item';\nimport styled from \"styled-components\";\nimport Spinner from '../spinner/spinner';\nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {withPoststoreService} from '../fuck-hoc/withPoststoreService';\nimport {postsLoaded} from '../../action/action';\n\nclass List extends Component {\n\n\n    componentDidMount() {\n        const {fireBaseApi, postsLoaded} = this.props;\n\n        fireBaseApi.getPosts()\n            .then((items) => postsLoaded(items))\n\n    }\n\n\n    render() {\n        const {items, loading} = this.props;\n        const list = !loading ? <PostsView items={items}/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        return (\n            <Container>\n                <Ulist>\n                    {spinner}\n                    {list}\n                </Ulist>\n            </Container>\n        )\n    }\n\n}\n\n\nconst PostsView = ({items}) => {\n    return items.map(item => {\n        return (\n\n            <FlexLi key={item.id}>\n                <ListItem className='li__title'>\n                    {item.title}\n                </ListItem>\n                <ListItem className='li__text'>\n                    {item.fulltext}\n                </ListItem>\n                <ListItem className='li__date'>\n                    {item.date}\n                </ListItem>\n                <ListItem className='li__note'>\n                    {item.type}\n                </ListItem>\n            </FlexLi>\n\n        )\n    })\n\n}\nconst mapStateToProps = ({items, loading}) => {\n    return {items, loading};\n};\n\nconst mapDispatchToProps = {\n    postsLoaded\n};\nexport default compose(\n    withPoststoreService(),\n    connect(mapStateToProps, mapDispatchToProps)\n)(List);\n\nconst Ulist = styled.ul`\n\tmargin-bottom: 15px;\n\t\n\tdisplay: flex;\n\tborder-radius: 4px;\n\tborder: none;\n\tcolor: #fff;\n\tpadding: 20px;\n\tmin-height: 320px;\n\tbox-sizing: border-box;\n\ttext-transform: uppercase;\n\tfont-weight: bold;\n\tfont-size: 14px;\n\tbackground-color: #09a222;\n    flex-wrap: wrap;\n\t&:focus {\n\t\toutline: none;\n\t}\n`;\n\nconst Container = styled.div`\n    width: 900px;\n    margin: 0 auto;\n`;\nconst FlexLi = styled.li`\n\tdisplay: block;\n\twidth: calc(33.33% - 20px);\n\tmargin: 0 10px 10px;\n\tflex-wrap: wrap;\n\tpadding: 15px;\n\tbox-sizing: border-box;\n    background-color: #e48079;\n\t&:focus {\n\t\toutline: none;\n\t}\n`;\n","import React from 'react';\nimport Form from '../form/form';\nimport List from '../list/list';\n\nconst App = () =>{\n  return (\n      <div className='container'>\n\n      <List/>\n        <Form/>\n      </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    items: [],\n    loading: true,\n    openMenuFlag: false,\n};\n\nconst reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case 'POSTS_LOADED':\n            return {\n                ...state,\n                items: action.payload,\n                loading: false,\n            };\n        case 'OPEN_MENU':\n            return {\n                ...state,\n                openMenuFlag: true,\n            };\n        case 'CLOSE_MENU':\n            return {\n                ...state,\n                openMenuFlag: false,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","export default class FireBaseApi {\n    _apiURL = `https://js-simple-6efdf.firebaseio.com/posts.json`;\n\n    newRequest(method, body = null) {\n        return new Request(this._apiURL, {\n            method: method,\n            body: body\n        })\n    }\n\n    setPosts = async (data) =>{\n        const response = await fetch(this.newRequest('post',data));\n\n         return await response.json()\n    }\n\n    getPosts = async () => {\n        const response = await fetch(this.newRequest('get'));\n        const data = await response.json();\n        return this.objectToArray(data);\n    };\n\n    objectToArray(data) {\n        return Object.keys(data).map(key => {\n            const item = data[key];\n            item.id = key;\n            return item;\n        })\n    }\n\n    _transformPosts = (posts) => {\n        return posts.map(post => {\n            return {\n                id: post.id,\n                title: post.title,\n                fulltext: post.fulltext,\n                date: post.date,\n                note: post.note,\n            }\n        })\n\n    }\n}\n\nconst fireBaseApi = new FireBaseApi();\n\nconsole.log(fireBaseApi.getPosts());\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport {PostServiceProvider} from './components/post-context/post-service-context'\n\nimport reducer from './reducer/reducer';\nimport FireBaseApi from \"./services/firebase-api\";\n\n\nconst fireBaseApi = new FireBaseApi();\n\nconst store = createStore(reducer);\nReactDOM.render(\n    <Provider store={store}>\n        <PostServiceProvider value={fireBaseApi}>\n            <App/>\n        </PostServiceProvider>\n\n    </Provider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}