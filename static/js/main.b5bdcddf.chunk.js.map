{"version":3,"sources":["utils/cssUtils.js","components/button/button.jsx","reducers/loginReducer.js","reducers/index.js","state.js","actions/loginActions.js","components/navigations/navigations.jsx","components/header/header.jsx","components/select/select.js","pages/mainPage/MainPage.jsx","hoc/withLoginProps.js","pages/aboutPage/AboutPage.jsx","pages/newsPage/NewsPage.jsx","components/select/testSelect.js","App.js","serviceWorker.js","index.js"],"names":["CssUtils","mergeClasses","classes","classNames","mergeModifiers","baseClass","modifiers","cssModifiers","Array","slice","result","forEach","modifier","Button","onClickAction","e","console","log","props","onClick","preventDefault","this","children","className","disabled","size","color","link","isBlock","text","buttonClass","to","Component","initialState","login","username","password","appReducer","combineReducers","state","action","type","payload","form","formReduser","rootReduser","store","createStore","rootReducer","dispatch","getState","loginAction","logoutAction","Navigations","connect","Header","Option","handleClick","value","isActive","item","selected","includes","classOption","multiple","currentValue","React","Select","open","handleClickRemove","select","input","onChange","handleToggle","onChoseItem","items","join","setState","prevState","hasSelected","filter","i","handleClear","labeltext","getText","textField","map","option","key","id","length","event","stopPropagation","val","find","MainPage","_onSubmit","formData","LoginReduxForm","onSubmit","reduxForm","handleSubmit","htmlFor","Field","component","name","aria-describedby","placeholder","mapDispatchToProps","withLoginProps","View","AboutPage","NewsPage","Seleted","onBlur","options","MyAwesomeComponent","multi","PureComponent","initialValue","App","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5bdcddf.chunk.js","sourcesContent":["import classNames from 'classnames';\n\nconst mergeClasses = (...classes) => classNames(classes);\n\nconst mergeModifiers = (baseClass,modifiers) =>{\n    if(!modifiers) return baseClass;\n\n    const cssModifiers = modifiers instanceof Array ? modifiers.slice() : [modifiers];\n\n\n    let result = baseClass;\n    cssModifiers.forEach(modifier=>{\n        if(typeof modifiers === 'string'){\n            result += ` ${baseClass}--${modifier}`\n        }\n    });\n\n    return result;\n};\n\nconst CssUtils = {\n    mergeClasses,\n    mergeModifiers\n}\n\n\nexport default CssUtils;\n","import React, {Component} from 'react';\n// import PropTypes from 'prop-types';\nimport CssUtils from '../../utils/cssUtils'\nimport {NavLink} from \"react-router-dom\";\n\nclass Button extends Component {\n    onClickAction = e => {\n        console.log(this.props.onClick)\n            e.preventDefault();\n            this.props.onClick(e);\n    }\n    render() {\n        const {\n            children, className, onClick, disabled,size,color,link, isBlock ,text,\n        } = this.props;\n        const buttonClass = CssUtils.mergeClasses(\n            className,\n            color && `${className}-${color}`,\n            size && `${className}-${size}`,\n            isBlock && `${className}-block`\n        );\n\n        if(link){\n            return (\n                <NavLink\n                    to={link} className={buttonClass}\n                >\n                    {text || children}\n                </NavLink>\n            )\n        }\n        return (\n            <button\n             className={buttonClass}\n             onClick={onClick && this.onClickAction}\n             disabled={disabled}\n            >\n                {text || children}\n            </button>\n        );\n    }\n}\n\nexport default Button;\n//\n// const Button = ({children, className, onClick, disabled, active, ...attrs}) => {\n//\n//\n//     const classes = classNames(\n//         'btn',\n//         className,\n//         {active},\n//         {disabled}\n//     )\n//\n//     const Tag = attrs.href ? 'a' : 'button';\n//     return (\n//         <Tag\n//             {...attrs}\n//             className={classes}\n//             disable={disabled}\n//             onClick={onClickAction}\n//\n//         >\n//             {children}\n//         </Tag>\n//     )\n// };\n//\n// Button.propTypes = {\n//     children: PropTypes.node,\n//     onClick: PropTypes.func,\n//     classNames: PropTypes.string,\n//     disabled: PropTypes.bool,\n//     active: PropTypes.bool\n//\n// };\n// Button.defaultProps = {\n//     children: 'Button',\n//     onClick: () => {\n//     },\n//     classNames: '',\n//     disabled: false,\n//     active: false\n//\n// };\n//\n// export default Button;\n","const initialState = {\n    login: false,\n    username: '',\n    password: '',\n};\n\nexport const loginReducer = (state = initialState, action)=>{\n    switch (action.type) {\n        case 'LOGIN':\n            return{\n                ...state,\n                ...action.payload,\n                login: true,\n            }\n\n        case 'LOGOUT':\n\n            return{\n                ...initialState\n            }\n\n        default:\n            return state;\n\n\n    }\n\n}\n","import {loginReducer} from './loginReducer';\n\nimport {combineReducers} from \"redux\";\nimport {reducer as formReduser} from \"redux-form\";\n\n\nconst appReducer = combineReducers({\n    login: loginReducer,\n    form: formReduser,\n});\n\nconst rootReduser = (state,action) =>{\n    return appReducer(state,action);\n};\n\nexport default rootReduser;\n","import {createStore, applyMiddleware, compose} from 'redux';\n\nimport rootReducer from './reducers/';\n\nconst store = createStore(rootReducer);\n\nexport const dispatch = store.dispatch;\nexport const getState = store.getState;\nexport default store;\n","import { dispatch } from '../state';\n\n\nexport const loginAction = (payload) => {\n        console.log('action',payload)\n    dispatch({\n        type: 'LOGIN',\n        payload\n    })\n\n};\n\n\nexport const logoutAction = () => {\n    dispatch({\n        type: 'LOGOUT',\n    })\n\n};\n\n","import React, {Component} from 'react';\nimport Button from '../button/button';\nimport {logoutAction} from '../../actions/loginActions'\nimport {connect} from \"react-redux\";\nclass Navigations extends Component {\n\n\n    render() {\n        const { login } = this.props;\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <Button className=\"nav-link\"  color=\"primary\" link='/main'>Главная</Button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Button className=\"nav-link\"  color=\"primary\" link='/news'> Новости</Button>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Button className=\"nav-link\" color=\"primary\" link='/about'> О компании</Button>\n                        </li>\n                        <li className=\"nav-item ml-auto\">\n                            {login && <Button className=\"btn\" onClick={logoutAction} color=\"light\"> Выйти</Button>}\n                        </li>\n\n                    </ul>\n\n            </nav>\n        )\n    }\n}\nconst mapStateToProps = state =>({\n    login: state.login.login\n});\nexport default connect(mapStateToProps)(Navigations);\n","import React, {Component} from 'react';\nimport Navigations from '../navigations/navigations';\nclass Header extends Component {\n    render() {\n        return (\n            <div >\n               <Navigations/>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport './index.scss';\n\nclass Option extends React.Component {\n    handleClick = () => {\n        this.props.onClick && this.props.onClick(this.props.value);\n    };\n    isActive = item => {\n        return this.props.selected.includes(item);\n    };\n\n    render() {\n        console.log(this.props.selected)\n        let classOption;\n        if (!this.props.multiple) {\n            classOption = this.props.currentValue === this.props.value ? \"select__option selected\" : \"select__option\";\n\n        } else {\n            classOption = this.isActive(this.props.value) ? \"select__option selected\" : \"select__option\";\n\n        }\n        return (\n            <div className={classOption} onClick={this.handleClick}>{this.props.text}</div>\n        );\n    }\n}\n\nclass Select extends React.Component {\n    // constructor(props) {\n    // \tsuper(props);\n    // \tthis.state = {open: false}\n    // }\n\n    state = {\n        open: false,\n        selected: [],\n        value: null,\n    };\n\n    componentDidMount() {\n    }\n\n    get textField() {\n        const {input, items, labeltext} = this.props;\n        if (this.props.multiple) {\n            if (this.state.selected.length > 0) {\n                return [...this.state.selected].map(item => {\n                    return (\n                        <span\n                            key={item}\n                            className='select__option--span'\n                        >\n                            {item}\n                            <i\n                                onClick={(event) =>{\n                                    event.stopPropagation()\n                                    this.handleClickRemove(item)}}\n                            >&#10008;</i>\n                        </span>)\n                })\n            } else {\n                return labeltext;\n            }\n\n        }\n\n        if (!input.value || input.value.length === 0) {\n            return labeltext;\n        } else {\n            const val = items.find(i => i.value === this.props.input.value);\n            return val && val.text;\n        }\n    }\n\n    handleClickRemove =(value) => {\n        this.select(value);\n        this.props.input.onChange(value);\n    };\n\n    handleClick = (value) => {\n        if (this.props.multiple) {\n            console.log('вызов');\n            this.select(value);\n            this.props.input.onChange(value);\n        } else {\n            this.props.input.onChange(value);\n            this.handleToggle();\n        }\n\n    };\n    onChoseItem = items => {\n        const value = items.join(', ').slice(0, 50);\n        this.setState({\n            value: value === items.join(', ') ? value : `${value}...`,\n        });\n    };\n    handleToggle = (e) => {\n\n        this.setState(prevState => ({open: !prevState.open}));\n    };\n\n    select = item => {\n        const hasSelected = this.state.selected.includes(item);\n        this.setState(state => ({\n            selected: hasSelected\n                ? state.selected.filter(i => i !== item)\n                : [...state.selected, item],\n        }));\n    };\n\n\n    handleClear = () => {\n        this.props.input.onChange(null);\n        this.handleToggle();\n    };\n\n    render() {\n        const {labeltext, items} = this.props;\n        const getText = this.textField;\n        return (\n            <div className={`select ${this.state.open && 'opened'}`}>\n                <div\n                    className=\"select__block\"\n                    onClick={this.handleToggle}\n                >\n                    {getText}\n                </div>\n                <div className=\"select__list\">\n                    <div className=\"select__option\" onClick={this.handleClear}>{labeltext}</div>\n                    {items.map(option => {\n                        return (\n                            <Option\n                                multiple={this.props.multiple}\n                                selected={this.state.selected}\n                                key={option.id}\n                                onClick={this.handleClick}\n                                value={option.value}\n                                text={option.text}\n                                currentValue={this.props.input.value}\n                            />\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\n// Select.propTypes = {\n// \tlabeltext: PropTypes.string,\n// };\n//\n// Select.DefaultProps = {\n// \ttype: \"text\",\n// };\n\nexport default Select;\n","import React, {Component} from 'react';\nimport {Field, reduxForm} from 'redux-form'\nimport {connect} from 'react-redux';\nimport {loginAction} from '../../actions/loginActions';\nimport Select from \"../../components/select/select\";\n\nclass MainPage extends Component {\n\n\n    componentDidMount() {\n        // console.log(this.props)\n    }\n\n    _onSubmit=(formData)=>{\n        loginAction(formData);\n    }\n\n    render() {\n        // const { login } = this.props;\n        return (\n            <div className='container'>\n                <h1>главная страница</h1>\n                <LoginReduxForm onSubmit={this._onSubmit}/>\n            </div>\n        );\n    }\n}\n\n\nconst LoginForm = (props) => (\n    <form className='col-sm-10 col-md-5 col-12 col-xl-5' onSubmit={props.handleSubmit}>\n        <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Login</label>\n            <Field type=\"text\" component={'input'} name=\"username\" className=\"form-control\" id=\"exampleInputEmail1\"\n                   aria-describedby=\"emailHelp\" placeholder=\"Login\"/>\n\n        </div>\n        <div className=\"form-group\">\n            <label htmlFor=\"exampleInputPassword1\">Password</label>\n            <Field component={'input'} type=\"password\" name=\"password\" className=\"form-control\" id=\"exampleInputPassword1\"\n                   placeholder=\"Password\"/>\n        </div>\n        <Field\n            name=\"beer\"\n            component={Select}\n            multiple\n            labeltext=\"Выберите какое пиво пить будете\"\n            items={[\n                {id: 1, value: \"Клинское\", text: \"Клинское\"},\n                {id: 2, value: \"Жигулевское\", text: \"Жигулевское\"},\n                {id: 3, value: \"Три медведя\", text: \"Три медведя\"},\n                {id: 4, value: \"Витязь\", text: \"Витязь\"}\n            ]}\n        />\n        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n    </form>\n)\n\nconst LoginReduxForm = reduxForm({\n    form: 'loginForm',\n    // destroyOnUnmount: true,\n\n})(LoginForm);\n\nconst mapStateToProps = state => ({\n    login: state.login.login,\n    username: state.login.username,\n    password: state.login.password,\n});\n\nconst mapDispatchToProps = {\n    loginAction\n};\n// withLoginProps\n// export default compose(\n//     withLoginProps(),\n//     connect(mapStateToProps,mapDispatchToProps),\n// )(MainPage);\nexport default connect(mapStateToProps,mapDispatchToProps)(MainPage)\n","import React, { Component } from 'react';\nimport {Redirect} from \"react-router\";\nimport { connect } from \"react-redux\";\n\n// import Spinner from '../spinner';\n// import ErrorIndicator from '../error-indicator';\n\nconst withLoginProps = (View) => {\n    return class extends Component {\n        //\n        // state = {\n        //     data: null\n        // };\n\n        // componentDidMount() {\n        //     getData()\n        //         .then((data) => {\n        //             this.setState({\n        //                 data\n        //             });\n        //         });\n        // }\n\n        render() {\n            const { login } = this.props;\n\n            if (!login) {\n                return <Redirect to='/main'/>\n            }\n\n            return <View {...this.props} />;\n        }\n    };\n};\n\n\n\nexport default withLoginProps;\n","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport withLoginProps from \"../../hoc/withLoginProps\";\n\nclass AboutPage extends Component {\n    render() {\n        return (\n            <div>\n                О компании\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state =>({\n    login: state.login.login\n});\n\nexport default connect(mapStateToProps)(withLoginProps(AboutPage))\n","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport withLoginProps from \"../../hoc/withLoginProps\";\n\nclass NewsPage extends Component {\n    render() {\n        return (\n            <div>\n               Новости\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state =>({\n    login: state.login.login\n});\n\nexport default connect(mapStateToProps)(withLoginProps(NewsPage))\n// export default NewsPage;\n","import React, {PureComponent} from 'react';\nimport Select from 'react-select';\n// import 'react-select/dist/react-select.css';\nimport {Field, reduxForm} from \"redux-form\";\n\nconst Seleted = (props) => (\n    <Select\n        {...props}\n        value={props.input.value}\n        onChange={(value) => props.input.onChange(value)}\n        onBlur={() => props.input.onBlur(props.input.value)}\n        options={props.options}\n    />\n);\n\nclass MyAwesomeComponent extends PureComponent {\n    render() {\n        const options = [\n            {'label': 'Germany', 'value': 'DE'},\n            {'label': 'Russian Federation', 'value': 'RU'},\n            {'label': 'United States', 'value': 'US'}\n        ];\n        return (\n            <Field\n                name='countries'\n                options={options}\n                component={Seleted}\n                multi\n            />\n        )\n\n    }\n}\n\nexport default reduxForm({\n    form: 'loginForm',\n    initialValue: {\n        options: []\n    }\n\n})(MyAwesomeComponent);\n\n\n\n","import React, {Component} from 'react';\nimport Header from \"./components/header/header\";\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport MainPage from \"./pages/mainPage/MainPage\";\nimport AboutPage from \"./pages/aboutPage/AboutPage\";\nimport NewsPage from \"./pages/newsPage/NewsPage\";\nimport {Provider} from 'react-redux';\nimport store from \"./state\";\nimport MyAwesomeComponent from './components/select/testSelect'\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider  store={store}>\n                <BrowserRouter>\n                    <Header/>\n                    <div className='container pt-5'>\n                        <MyAwesomeComponent/>\n                        <Switch>\n                            <Route path='/' exact component={MainPage}/>\n                            <Route path='/main' component={MainPage}/>\n                            <Route path='/about' component={AboutPage}/>\n                            <Route path='/news' component={NewsPage}/>\n                            <Route render={() => {\n                                return (<h2>Ничего</h2>)\n                            }}/>\n                        </Switch>\n                    </div>\n                </BrowserRouter>\n            </Provider>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}